
library(MASS)
library(caret)
library(ggplot2)
regression_data <- read.csv("C:/Users/likun/OneDrive/Desktop/coursework S1/DS/2021 census/edu_eco_2021.csv")
colnames(regression_data)

library(dplyr)

# Clean data/ removing missing data
regression_data_clean <- regression_data_clean %>% filter(`Age..6.categories..Code` != 1, `Unpaid.care..5.categories..Code` != -8, `Highest.level.of.qualification..7.categories..Code` != -8, `Economic.activity.status.last.week..3.categories..Code` != -8)
regression_data_clean <- regression_data %>% filter(`Age..6.categories..Code` != 1, `Unpaid.care..5.categories..Code` != -8, `Highest.level.of.qualification..7.categories..Code` != -8, `Economic.activity.status.last.week..3.categories..Code` != -8)
view(regression_data_clean)
head(regression_data_clean)
regression_data_clean$`Unpaid.care..5.categories.` <- as.factor(regression_data_clean$`Unpaid.care..5.categories.`)
regression_data_clean$`Age..6.categories.` <- as.factor(regression_data_clean$`Age..6.categories.`)
regression_data_clean$`Sex..2.categories.` <- as.factor(regression_data_clean$`Sex..2.categories.`)
regression_data_clean$`Highest.level.of.qualification..7.categories.` <- as.factor(regression_data_clean$`Highest.level.of.qualification..7.categories.`)
regression_data_clean$`Economic.activity.status.last.week..3.categories.` <- as.factor(regression_data_clean$`Economic.activity.status.last.week..3.categories.`)
chi_care_sex <- chisq.test(table(regression_data_clean$`Unpaid.care..5.categories.`, regression_data_clean$`Sex..2.categories.`))
print(chi_care_sex)

install.packages(survey)
install.packages("survey")
library(survey)

# Used survey library as the observation is shown as total frequency in the data rather than individual level
survey_design <- svydesign(id = ~1, data = regression_data_clean, weights = ~Observation)

# Perform Chi-square test for each variables
chi_care_sex <- svychisq(~`Unpaid.care..5.categories.` + `Sex..2.categories.`, design = survey_design))
chi_care_sex <- svychisq(~`Unpaid.care..5.categories.` + `Sex..2.categories.`, design = survey_design)
print(chi_care_sex)
chi_care_edu <- svychisq(~`Unpaid.care..5.categories.` + `Highest.level.of.qualification..7.categories.`, design = survey_design)
print(chi_care_edu)
chi_care_age <- svychisq(~`Unpaid.care..5.categories.` + `Age..6.categories.`, design = survey_design)
print(chi_care_age)
chi_care_eco <- svychisq(~`Unpaid.care..5.categories.` + `Economic.activity.status.last.week..3.categories.`, design = survey_design)
print(chi_care_eco)

#Split the train/test data
library(nnet)
library(caret)
set.seed(123)
regression_data_clean <- regression_data_clean[sample(nrow(regression_data_clean)), ]
trainIndex <- createDataPartition(regression_data_clean$`Unpaid.care..5.categories.`, p = 0.7, list = FALSE)
train_regression <- regression_data_clean[trainIndex, ]
test_regression <- regression_data_clean[~trainIndex, ]
test_regression <- regression_data_clean[-trainIndex, ]

# multinomial regression model using all 4 variables
model <- multinom(as.factor(`Unpaid.care..5.categories.`) ~ `Economic.activity.status.last.week..3.categories.` + `Age..6.categories.` + `Highest.level.of.qualification..7.categories.` + `Sex..2.categories.`, data = train_regression, weights = train_regression$Observation)

# Predictive model
test_regression$predictions <- predict(model, newdata = test_regression)
accuracy <- mean(test_regression$predictions == test_regression$`Unpaid.care..5.categories.`) cat("Accuracy of the multinomial logistic regression model:", accuracy)

# Check the accuracy of model
accuracy <- mean(test_regression$predictions == test_regression$`Unpaid.care..5.categories.`)
cat("Accuracy of the multinomial logistic regression model:", accuracy)

savehistory("C:/Users/likun/OneDrive/Desktop/coursework S1/DS/regression_code.Rhistory")

summary(model)

#Calculate the p-value and z-value
model_summary <- summary(model)
coefficients <- model_summary$coefficients
standard_errors <- model_summary$standard.errors
z_values <- coefficients/standard_errors
p_values <- 2*(1-pnorm(abs(z_values)))

#present results in data frame
results <- data.frame(Coefficients = coefficients, Standard_Error = standard_errors, Z_value = z_values, P_value = p_values)
print(results)
